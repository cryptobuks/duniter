stages:
  - build
  - package
  - prerelease
  - release

.nvm_env: &nvm_env
  tags:
    - redshift
  before_script:
    - export NVM_DIR="$HOME/.nvm"
    - . "$NVM_DIR/nvm.sh"

.cached_nvm: &cached_nvm
  <<: *nvm_env
  cache:
    untracked: true
    paths:
      - node_modules/
  
build:
  <<: *nvm_env
  stage: build
  script:
    - yarn

.build_releases: &build_releases
  stage: package
  allow_failure: false
  image: duniter/release-builder:v1.2.0
  cache: {}
  when: manual
  tags:
    - redshift-duniter-builder
  artifacts:
    paths: &releases_artifacts
      - work/bin/

releases:test:
  <<: *build_releases
  when: always
  script:
    - rm -rf node_modules/
    - bash "release/arch/linux/build-lin.sh" "$(date +%Y%m%d).$(date +%H%M).$(date +%S)"
  artifacts:
    paths: *releases_artifacts
    expire_in: 4h
  except:
    - tags

releases:x64:
  <<: *build_releases
  script:
    - rm -rf node_modules/
    - bash "release/arch/linux/build-lin.sh" "${CI_COMMIT_TAG#v}"
  artifacts:
    paths: *releases_artifacts
    expire_in: 2 weeks
  only:
    - tags

.release_jobs: &release_jobs
  image: tensorflow/tensorflow:latest-py3
  tags:
    - redshift-duniter-builder
  script:
    - python3 .gitlab/releaser
  only:
    - tags

prerelease:
  <<: *release_jobs
  stage: prerelease
  variables:
    RELEASE_BIN_DIR: work/bin/
    SOURCE_EXT: '["tar.gz", "zip"]'

publish:
  <<: *release_jobs
  stage: release
  variables:
    RELEASE_BIN_DIR: work/bin/
    WIKI_RELEASE: Releases
  allow_failure: false
  when: manual
